//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BingHousing_BO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BHDbaseEntities : DbContext
    {
        public BHDbaseEntities()
            : base("name=BHDbaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CheckDetail> CheckDetails { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerProfile> CustomerProfiles { get; set; }
        public DbSet<Group> Groups { get; set; }
        public DbSet<GroupMember> GroupMembers { get; set; }
        public DbSet<IntervalType> IntervalTypes { get; set; }
        public DbSet<Invoice> Invoices { get; set; }
        public DbSet<OnlineCheck> OnlineChecks { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<Payee> Payees { get; set; }
        public DbSet<PaymentDetail> PaymentDetails { get; set; }
        public DbSet<PaymentMode> PaymentModes { get; set; }
        public DbSet<PayPalAccountDetail> PayPalAccountDetails { get; set; }
        public DbSet<PayPalDetail> PayPalDetails { get; set; }
        public DbSet<Plan> Plans { get; set; }
        public DbSet<RemainderEmail> RemainderEmails { get; set; }
        public DbSet<RoutingNumber> RoutingNumbers { get; set; }
        public DbSet<Subscription> Subscriptions { get; set; }
        public DbSet<UserDetail> UserDetails { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<UserSecurity> UserSecurities { get; set; }
        public DbSet<webpages_Membership> webpages_Membership { get; set; }
        public DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public DbSet<webpages_Roles> webpages_Roles { get; set; }
        public DbSet<ACHAccountDepositDetail> ACHAccountDepositDetails { get; set; }
        public DbSet<UserACHBankAccount> ACHBankAccounts { get; set; }



        public virtual ObjectResult<CustomerDetail> GetCustomerDetails(Nullable<int> id, Nullable<bool> isCustomer)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var isCustomerParameter = isCustomer.HasValue ?
                new ObjectParameter("IsCustomer", isCustomer) :
                new ObjectParameter("IsCustomer", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerDetail>("GetCustomerDetails", idParameter, isCustomerParameter);
        }
    
        public virtual ObjectResult<InvoiceDetail> GetInvoiceDetails(string invoiceNumber, Nullable<int> isPaid, Nullable<int> paymentId, Nullable<int> invoiceId, Nullable<int> userId, string type="", string search="")
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(int));
    
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InvoiceDetail>("GetInvoiceDetails", invoiceNumberParameter, isPaidParameter, paymentIdParameter, invoiceIdParameter, userIdParameter, typeParameter, searchParameter);
        }
    
        public virtual ObjectResult<EmailedReport> GetAllEmailedReport(Nullable<int> id, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailedReport>("GetAllEmailedReport", idParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<EmailedReport> GetAllRemainderEmailReport(Nullable<int> id, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailedReport>("GetAllRemainderEmailReport", idParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Payments> GetAllPayments(Nullable<int> userId, string type="")
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payments>("GetAllPayments", userIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<get_AllNotifications_Result> get_AllNotifications(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<get_AllNotifications_Result>("get_AllNotifications", userIdParameter);
        }
    
        public virtual ObjectResult<sp_getEmailedReport_Result> sp_getEmailedReport(Nullable<int> id, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getEmailedReport_Result>("sp_getEmailedReport", idParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<sp_getRemainderEmailReport_Result> sp_getRemainderEmailReport(Nullable<int> id, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getRemainderEmailReport_Result>("sp_getRemainderEmailReport", idParameter, fromParameter, toParameter);
        }
    }
}
